The ``1-my_list`` module
=====================================

Return
------
Returns a sorted list

Usage
-----

- This module defines a class ``MyList`` that inherits from the
  python3 inbuilt object ``list``.

Instatiation
===========

``MyList`` can be instantiated with and without an argument.
When no argument is provided, an empty list is returned.

import module

::
	>>> MyList = __import__('1-my_list').MyList

	>>> my_list = MyList()
	>>> print(my_list)
	[]

	>>> my_list = MyList([10, 12, 1])
	>>> print(my_list)
	[10, 12, 1]
	>>> my_list.print_sorted()
	[1, 10, 12]

Argument has to be an interable

::

	>>> my_list = MyList(None)
	Traceback (most recent call last):
		...
	TypeError: 'NoneType' object is not iterable

Only one argument (of list type) is allowed

::

	>>> my_list = MyList([1, 2, 3], [9, 10, 11])
	Traceback (most recent call last):
		...
	TypeError: list expected at most 1 argument, got 2

A list of strings are sorted according starting alphabet

::

	>>> my_list = MyList()
	>>> my_list.append(2)
	>>> my_list.append(1)
	>>> my_list.append(3)
	>>> my_list.append(4)
	>>> my_list.append(6)
	>>> my_list.append(5)
	>>> print(my_list)
	[2, 1, 3, 4, 6, 5]

	>>> my_list = MyList()
	>>> my_list.append("Paul")
	>>> my_list.append("CID")
	>>> my_list.append("ALX")
	>>> print(my_list)
	['Paul', 'CID', 'ALX']
	>>> my_list.print_sorted()
	['ALX', 'CID', 'Paul']

Old list is not changed

::
	>>> print(my_list)
	['Paul', 'CID', 'ALX']

``print_sorted`` does not take in arguments

::
	>>> my_list.print_sorted("Paul")
	Traceback (most recent call last):
		...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

``print_sorted`` works on only a list of the same tpe of elements

::

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append("Paul")
	>>> my_list.append(None)
	>>> my_list.append(True)
	>>> my_list.print_sorted()
	Traceback (most recent call last):
		...
	TypeError: '<' not supported between instances of 'str' and 'int'

	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

::

	>>> my_list = MyList()
	>>> print(my_list.print_sorted)
	<bound method MyList.print_sorted of []>
